
import maya.cmds as cmds
import random
from functools import partial
import math


# creates the GUI
def UI():
    # check to see if window exists
    if (cmds.window("cityGen", exists=True)):
        cmds.deleteUI("cityGen")

    # create window
    window = cmds.window("cityGen", title="City Generator", width=265, height=430, s=False, menuBar=True)

    cmds.columnLayout(columnAttach=('both', 5), rowSpacing=10, columnWidth=250)

    # add fields
    cmds.text(label="City Width", al="left")
    cityWidth = cmds.textField(tx="0")

    cmds.text(label="City Depth", al="left")
    cityDepth = cmds.textField(tx="0")

    cmds.text(label="Maximum Building Height", al="left")
    maxBuildingHeight = cmds.textField(tx="70")

    cmds.text(label="Building Gap", al="left")
    buildingGap = cmds.textField(tx="2")

    cmds.text(label="Street Width", al="left")
    streetWidth = cmds.textField(tx="16")

    cmds.text(label="Block Size", al="left")
    blockSize = cmds.textField(tx="125")

    # create progress bar
    progressControl = cmds.progressBar(maxValue=100, width=100, vis=False)

    # create a button to generate
    cmds.button(label="Generate",
                c=partial(cityGen, cityWidth, cityDepth, maxBuildingHeight, buildingGap, streetWidth, blockSize,
                          progressControl))

    # show window
    cmds.showWindow(window)


# where the magic happens
def cityGen(cityWidth, cityDepth, maxBuildingHeight, buildingGap, streetWidth, blockSize, progressControl, *args):
    # grab any user-defined buildings
    userBuildings = getUserBuildings()

    # grab the input from the GUI
    cityWidth = int(cmds.textField(cityWidth, q=True, text=True))
    cityDepth = int(cmds.textField(cityDepth, q=True, text=True))
    maxBuildingHeight = int(cmds.textField(maxBuildingHeight, q=True, text=True))
    buildingGap = int(cmds.textField(buildingGap, q=True, text=True))
    streetWidth = int(cmds.textField(streetWidth, q=True, text=True))
    blockSize = int(cmds.textField(blockSize, q=True, text=True))

    # define some defaults for the max building sizes
    buildingBaseX = 20
    buildingBaseZ = 20
    buildingMinWidth = 5
    buildingMinHeight = 3

    # default counters for spacing the buildings
    xSpace = 0
    biggestX = 0
    counter = 0
    xcounter = 0

    # create a group that all of the buildings will be under
    cmds.group(em=True, n="gen_buildings")
    cmds.group(em=True, n="street")
    cmds.group(em=True, n="street")
    cmds.group(em=True, n="street")

    # create a ground plane
    cmds.polyPlane(w=cityWidth, h=cityDepth, n="ground")
    cmds.move(cityWidth / 2, 0, cityDepth / 2)

    # stores the building objects we'll be creating
    buildings = []

    building = Building(random.randint(1,3), random.randint(1,3), random.randint(3,5), random.randint(1,3))
    building.create()

    # update the progress bar


class Building:
    buildingCount = 0

    # class constructor
    def __init__(self, inWidth, inDepth, inHeight, typeOfBuilding):
        self.width = inWidth
        self.height = inHeight
        self.depth = inDepth
        self.buildingType = typeOfBuilding
        Building.buildingCount += 1
        self.buildingName = "Building_" + str(self.buildingCount)
        self.xDiv = 10
        self.yDiv = 10
        self.zDiv = 10

    # function creates the actual building, returns void
    def create(self):

        # building type number 1
        if (self.buildingType == 0):
            cmds.polyCube(w=self.width, d=self.depth, h=self.height, n=str(self.buildingName))

        # building type number 2
        elif (self.buildingType == 1):

            cmds.polyCube(w=self.width, d=self.depth, h=self.height, n=str(self.buildingName))

            # random number of upward extrusions
            for i in range(0, random.randrange(0, 3)):
                cmds.polyExtrudeFacet(str(self.buildingName) + ".f[1]", kft=False, ls=(0.8, 0.8, 0))
                cmds.polyExtrudeFacet(str(self.buildingName) + ".f[1]", kft=False, ltz=30)

        # building type number 3
        else:
            cmds.polyCube(w=self.width, d=self.depth, h=self.height, sx=self.xDiv, sy=self.yDiv, sz=self.zDiv,
                          n=str(self.buildingName))

            sides = []

            # select everything except the top and bottom of the building
            for i in range(0, 8):
                if (i != 1 and i != 3):
                    sides.append(str(self.buildingName) + ".f[" + str(self.xDiv * self.yDiv * i) + ":" + str(
                        (self.xDiv * self.yDiv * (i + 1)) - 1) + "]")

            # extrude the faces to create windows
            cmds.polyExtrudeFacet(sides[0], sides[1], sides[2], sides[3], sides[4], sides[5], kft=False,
                                  ls=(0.8, 0.8, 0))
            windows = cmds.ls(sl=True)
            cmds.polyExtrudeFacet(windows[1], windows[2], windows[3], kft=False, ltz=-0.2)
            cmds.select(self.buildingName)

    # function moves the building, returns void
    def moveBuilding(self, x, y, z):
        cmds.select(self.buildingName)
        cmds.move(x, y, z)
        cmds.select(cl=True)


# get any buildings defined by the user
def getUserBuildings(*args):
    userBuildings = []

    group = cmds.ls(sl=True)

    if (len(group) > 0):
        userBuildings = cmds.listRelatives(group, c=True)

    return userBuildings


# randrange_float function taken from stackoverflow.com/questions/11949179/how-to-get-a-random-float-with-step-in-python
def randrange_float(start, stop, step):
    return random.randint(0, int((stop - start) / step)) * step + start
